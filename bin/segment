#!/usr/bin/env node
const fs = require( 'fs' ),
	Segmenter = require( __dirname + '/../lib/segmentation/CXSegmenter' ),
	MWPageLoaderConfig = require( __dirname + '/../lib/mw/MWPageLoader.config.json' ),
	LinearDoc = require( __dirname + '/../lib/lineardoc' );

function normalize( html ) {
	const normalizer = new LinearDoc.Normalizer();
	normalizer.init();
	normalizer.write( html.replace( /[\t\r\n]+/g, '' ) );
	return normalizer.getHtml();
}

function getParsedDoc( content ) {
	const parser = new LinearDoc.Parser( new LinearDoc.MwContextualizer( {
		removableSections: MWPageLoaderConfig.removableSections
	} ), {
		wrapSections: true
	} );
	parser.init();
	parser.write( content );
	return parser.builder.doc;
}

const html = fs.readFileSync( '/dev/stdin', 'utf8' );
if ( html.trim() === '' ) {
	const script = process.argv[ 1 ];
	process.stderr.write(
		'Usage: node ' + script + ' < file\n' +
		'Input must be wrapped in a block element such as <p>...</p> or <div>..</div>.\n'
	);
	process.exit( 1 );

}

let parsedDoc = getParsedDoc( html );
let segmenter = new Segmenter();
let segmentedLinearDoc = segmenter.segment( parsedDoc, 'en' );
const result = normalize( segmentedLinearDoc.getHtml() );
process.stdout.write( result + '\n' );
process.stdout.write( '==Categories==\n' );
process.stdout.write( JSON.stringify( parsedDoc.categories, null, 2 ) + '\n' );
